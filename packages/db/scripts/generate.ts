import type { Dirent } from 'node:fs'
import fs from 'node:fs/promises'
import path from 'node:path'

const DIRECTORIES = ['tables', 'relations']

const ROOT_DIR = path.resolve(__dirname, '../')
const TYPEDEFS_DIR = path.resolve(ROOT_DIR, 'src/schema')
const TYPES_FILE = path.resolve(TYPEDEFS_DIR, 'index.ts')

async function getFiles(dir: string): Promise<string[]> {
  const dirents: Dirent[] = []
  try {
    dirents.push(...(await fs.readdir(dir, { withFileTypes: true })))
  } catch (err) {
    const error = err as unknown as { code: string }
    if (error.code !== 'ENOENT') throw error
  }
  const files = await Promise.all(
    dirents.map(async (dirent) => {
      const res = path.resolve(dir, dirent.name)
      return dirent.isDirectory() ? await getFiles(res) : res
    }),
  )
  return Array.prototype.concat(...files)
}

async function generate() {
  const output = [
    '// DO NOT EDIT',
    '// This file is autogenerated',
    '// use `pnpm generate` to update',
    '// If you want to make changes, edit the file scripts/generate.ts',
  ]

  for (const dir of DIRECTORIES) {
    output.push(`\n// exporting ${dir}`)
    const files = await getFiles(path.resolve(TYPEDEFS_DIR, dir))
    for (const file of files) {
      const fileDef = path.parse(file)
      const relativePath = `./${fileDef.dir.slice(file.indexOf(dir))}/${
        fileDef.name !== 'index' ? fileDef.name : ''
      }`
      output.push(`export * from '${relativePath}'`)
    }
  }

  fs.writeFile(TYPES_FILE, `${output.join('\n')}\n`)
}

generate().then(() => {
  console.log(`âœ” Generated ${TYPES_FILE.slice(ROOT_DIR.length + 1)}`)
})
